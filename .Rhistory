library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
```{r}
library(palmerpenguins)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
```{r}
library(palmerpenguins)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(palmerpenguins)
library(dplyr)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
install.packages("palmerpenguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
install.packages("palmerpenguins")
library(palmerpenguins)
renv::init()
install.packages("yaml")
install.packages("palmerpenguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
renv::init()
install.packages("DBI")
install.packages("DBI")
renv::clearCache()
renv::deactivate()  # Temporarily deactivate `renv`
renv::deactivate()  # Temporarily deactivate `renv`
install.packages("DBI")
shiny::runApp()
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v, "penguin_model")
from vetiver import VetiverAPI
# Assuming 'v' is already loaded from the pin in the previous step
app = VetiverAPI(v, check_prototype=True)
# Run the API
#if __name__ == "__main__":
#    app.run(port=8080)
quit
runApp()
runApp()
runApp()
runApp()
renv::snapshot()
renv::status()
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v, "penguin_model")
quit
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
install.packages("dbplyr")
install.packages("DBI")
install.packages("DBI")
renv::deactivate()
library(DBI)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v, "penguin_model")
from vetiver import VetiverAPI
# Assuming 'v' is already loaded from the pin in the previous step
#app = VetiverAPI(v, check_prototype=True)
# Run the API
#if __name__ == "__main__":
#    app.run(port=8080)
library(shiny)
library(httr2)
quit
library(shiny)
library(httr2)
renv::activate()
renv.deactivate()
renv::deactivate()
reticulate::repl_python()
from vetiver import VetiverAPI
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
quit
library(reticulate)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
library(shiny)
library(httr2)
renv::snapshot()
renv:status()
renv::status()
renv::install("DBI")
options(repos = c(CRAN = "https://cran.rstudio.com"))
renv::settings$repositories()
options(repos = c(CRAN = "https://cran.rstudio.com"))
renv::settings$repositories()
install.packages("DBI")
renv::cache$clean()
renv::hydrate()
library(shiny)
library(httr2)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
from vetiver import VetiverAPI
quit
library(reticulate)
renv::snapshot()
vetiver.prepare_docker(model_board, "cars_mpg")
from vetiver import prepare_docker
reticulate::repl_python()
from vetiver import prepare_docker
vetiver.prepare_docker(model_board, "cars_mpg")
from vetiver import prepare_docker
vetiver.prepare_docker(model_board, "cars_mpg")
from vetiver import prepare_docker
prepare_docker(model_board, "penguin_model")
quit
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v, "penguin_model")
from vetiver import VetiverAPI
# Assuming 'v' is already loaded from the pin in the previous step
app = VetiverAPI(v, check_prototype=True)
# Run the API
#if __name__ == "__main__":
#    app.run(port=8080)
from vetiver import prepare_docker
prepare_docker(model_board, "penguin_model")
quit
library(reticulate)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v, "penguin_model")
from vetiver import VetiverAPI
# Assuming 'v' is already loaded from the pin in the previous step
app = VetiverAPI(v, check_prototype=True)
# Run the API
#if __name__ == "__main__":
#    app.run(port=8080)
from vetiver import prepare_docker
prepare_docker(model_board, "penguin_model")
quit
library(reticulate)
reticulate::repl_python()
from pins import board_folder
from vetiver import vetiver_pin_write, VetiverModel
# Example model creation (replace this with your actual model training code)
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
# Setting up a board directory for storing the model
model_board = board_folder("/data/model", allow_pickle_read=True)
# Saving the model to the specified directory
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
# Assuming 'v' is already loaded from the pin in the previous step
app = VetiverAPI(v, check_prototype=True)
# Run the API
#if __name__ == "__main__":
#    app.run(port=8080)
#from vetiver import prepare_docker
#prepare_docker(model_board, "penguin_model")
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
reticulate::py_last_error()
quit
quit
library(reticulate)
reticulate::py_last_error()
dir.create("/data/model", recursive = TRUE, showWarnings = TRUE)
reticulate::repl_python()
reticulate::repl_python()
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
model_directory = '/data/model'
if not os.path.exists(model_directory):
os.makedirs(model_directory)
model_path = os.path.join(model_directory, 'penguin_model.joblib')
joblib.dump(model, model_path)
from pins import board_folder
from vetiver import vetiver_pin_write
model_directory = '/data/model'
if not os.path.exists(model_directory):
os.makedirs(model_directory)
model_path = os.path.join(model_directory, 'penguin_model.joblib')
joblib.dump(v, model_path)
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
import os
from pins import board_folder
from vetiver import vetiver_pin_write
model_directory = '/data/model'
if not os.path.exists(model_directory):
os.makedirs(model_directory)
model_path = os.path.join(model_directory, 'penguin_model.joblib')
joblib.dump(v, model_path)
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
import os
from pins import board_folder
from vetiver import vetiver_pin_write
from joblib import dump
model_directory = '/data/model'
if not os.path.exists(model_directory):
os.makedirs(model_directory)
model_path = os.path.join(model_directory, 'penguin_model.joblib')
joblib.dump(v, model_path)
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
import os
from pins import board_folder
from vetiver import vetiver_pin_write
from joblib import dump
model_directory = '/data/model'
if not os.path.exists(model_directory):
os.makedirs(model_directory)
model_path = os.path.join(model_directory, 'penguin_model.joblib')
joblib.dump(v, model_path)
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
import os
from pins import board_folder
from vetiver import vetiver_pin_write
from joblib import dump
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
import os
from pins import board_folder
from vetiver import vetiver_pin_write
from joblib import dump
model_board = board_folder("data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
quit
print("This is my website created by quarto.")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
